Script started on Tue 19 Feb 2013 03:33:14 PM EST
jlantos1@vm71:~/cs240/hw2$ ls -l
total 80
-rwxr-xr-x 1 jlantos1 cs240-1G  8594 Feb 19 15:08 hist
-rw-r--r-- 1 jlantos1 cs240-1G  2719 Feb 19 15:25 hist.c
-rwxr-xr-x 1 jlantos1 cs240-1G  8558 Feb 19 15:08 reverse
-rw-r--r-- 1 jlantos1 cs240-1G  2037 Feb 18 18:39 reverse.c
-rw-r--r-- 1 jlantos1 cs240-1G   268 Feb 14 13:43 reverse.in
-rwxr-xr-x 1 jlantos1 cs240-1G  8525 Feb 19 15:08 trim
-rw-r--r-- 1 jlantos1 cs240-1G  2172 Feb 18 18:35 trim.c
-rw-r--r-- 1 jlantos1 cs240-1G    94 Feb 15 13:04 trim.in
-rw-r--r-- 1 jlantos1 cs240-1G    74 Feb 19 15:31 trim.out
-rw-r--r-- 1 jlantos1 cs240-1G     0 Feb 19  2013 typescript
-rw-r--r-- 1 jlantos1 cs240-1G 14159 Feb 19  2013 typescript1.old
-rw-r--r-- 1 jlantos1 cs240-1G 13759 Feb 19 15:15 typescript.old
-rwxr-xr-x 1 jlantos1 cs240-1G  8515 Feb 19 15:09 vt
-rw-r--r-- 1 jlantos1 cs240-1G  2185 Feb 18 18:40 vt.c
-rw-r--r-- 1 jlantos1 cs240-1G    12 Feb 14 13:43 vt.in
-rw-r--r-- 1 jlantos1 cs240-1G   105 Feb 19 15:32 vt.out
jlantos1@vm71:~/cs240/hw2$ cat trim.c
#include <stdio.h>
#define MAXLINE 1000 /* maximum input line size */

/* James Lantos, CS240, HW2, No. 1 											*/

/* This is a summary of key steps in a program which removes 				*/
/* blanks and tabs from the end of lines (before the EOF or /n) 			*/
/* which are read in from standard input, and which prints those lines 		*/
/* but doesnt print a line with just blanks/tabs 							*/
/* Basic code form has been adapted from K/R textbook code 					*/

/* ==== PSEUDOCODE: SUMMARY OF STEPS ============================= 			*/
/* 1. Read line into array.  												*/
/* 2. Step through the length of inputted line (while..)					*/
/* 2. 		Test for blanks/tabs. 											*/
/* 3. 		While blanks/tabs are found, keep going. No blanks/tabs,quit.	*/	
/* 4. 		If you find valid characters--then you have a line. 			*/
/* 5. 		Move to add trailing new line \n and \0; 						*/
/* 6. 		Otherwise if a line with just blanks/tab is 					*/
/*       		found .. do not print it. Go to retrieve next line.			*/

int mygetline(char line[], int maxline);

int main(void)
{
	int i, length; 							/* current line length */
	char line[MAXLINE];  					/* current input line */
	
    while ((length = mygetline(line, MAXLINE)) > 0) {  
        i = length - 2; 	/* Set i to be the length of line/array */
							/* excluding \n and \0			  		*/
	
	while (i >= 0 && (line[i] == ' ' || line[i] == '\t'))		
			--i;					
			if (i > 0) {				
										
			line[i+1] = '\n';		
            line[i+2] = '\0';
            printf("%s", line);			/*  ..and print the line */
		}						       
	}
	return 0;
}

/* mygetline: read a line into char [s] and return length */
int mygetline(char s[], int lim)
{ 
	int c, i;
	
	for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i) /* read from stdin */
		s[i] = c;							/* copy the characters into the array */
		
	if (c == '\n') {						/* if new line char reached.. */
		s[i] = c;							/* copy to array */
		++i;								/* increment i */
	}
	s[i] = '\0';							/* copy null string - mark end of array  */
	return i;								/* length of the line/array is the return value */
}



jlantos1@vm71:~/cs240/hw2$ cat reverse.c
#include <stdio.h>

#define MAXLINE 1000

/* James Lantos, CS240, HW2, No. 2 												*/

/* This is a summary of steps in a program which reads lines 					*/
/* froms stdin and writes reversed lines to stdout until it encounters an EOF. */
/* Basic code form has been adapted from K/R textbook code 						*/

/* ==== PSEUDOCODE: SUMMARY OF STEPS ============================= 				*/
/* Read the new line in 														*/
/* Copy the line to an array 													*/
/* Reverse the order of the characters in the line 								*/
/* Print out the reversed line 													*/

int mygetline(char s[], int max);
void reverse(char s[]);

int main(void)
{
    int length;							
    char line[MAXLINE];							

    while ((length = mygetline(line, MAXLINE)) != 0) {    /* get the line set return length value */
        if (length > 1) {								/* is there more than 1 char? */
            reverse(line);								/* if so, reverse the chars */
            printf("%s\n", line);						/* print the reversed line */
        }
    }

    return 0;
}

int mygetline(char s[], int max) {					
    int i, c;										
    for (i=0; i<max-1 && (c=getchar())!=EOF && c!='\n'; ++i) {  
        s[i] = c;									
    }
    if (c == '\n') {								/* if you read end of line char... */
        s[i] = c;									/* store end of line in array */
        ++i;										/* increment array position */
    }
    s[i] = '\0';									/* add trailing /0 to mark end of array */
    return i;
}

void reverse(char s[]) {							 /* perform reverse character method */
    int in, out;
    char holder;

    for (out = 0; s[out] != '\0'; ++out)
	; 												/* do nothing while you build up value of out */
    out--;											/*  decrement out */ 

    if (s[out] == '\n') {
        s[out] = '\0';
        out--;
    }

    for (in = 0; in < out; in++) {					/* perform character switch */
        holder = s[in];
        s[in] = s[out];
        s[out] = holder;
        out--;
    }
}jlantos1@vm71:~/cs240/hw2$ cat vt.c
#include <stdio.h>

/* James Lantos, CS240, HW2, No. 3 									*/

/* Program should read characters from stdin and write to stdout. 	*/
/* For each char input, it prints on a single line. 				*/
/* 	a ) the ASCII name of the character. 							*/
/*  b ) the hex value of the character.								*/
/* Program stops when encounters an EOF condition on stdin. 		*/

/* Basic code form has been adapted from K/R textbook code 			*/
/* ..and code supplied by professor 								*/

/* ===== PSEUDO CODE / SCHEMATIC =====								*/
/* 1. Stdin file expected											*/
/* 2. ASCII values stored into array asciiname						*/
/* 3. Get the next character from stdin 							*/
/* 4. Print the string and hex value								*/

int c;

main()
	
{

char asciiname[] =
        "NUL\0"  "SOH\0"  "STX\0"  "ETX\0"  "EOT\0"  "ENQ\0"  "ACK\0"  "BEL\0"
        " BS\0"  " HT\0"  " NL\0"  " VT\0"  " NP\0"  " CR\0"  " SO\0"  " SI\0"
        "DLE\0"  "DC1\0"  "DC2\0"  "DC3\0"  "DC4\0"  "NAK\0"  "SYN\0"  "ETB\0"
        "CAN\0"  " EM\0"  "SUB\0"  "ESC\0"  " FS\0"  " GS\0"  " RS\0"  " VS\0"
        " SP\0"  "  !\0"  "  \"\0" "  #\0"  "  $\0"  "  %\0"  "  &\0"  "  '\0"
        "  (\0"  "  )\0"  "  *\0"  "  +\0"  "  ,\0"  "  -\0"  "  .\0"  "  /\0"
        "  0\0"  "  1\0"  "  2\0"  "  3\0"  "  4\0"  "  5\0"  "  6\0"  "  7\0"
        "  8\0"  "  9\0"  "  :\0"  "  ;\0"  "  <\0"  "  =\0"  "  >\0"  "  ?\0"
        "  @\0"  "  A\0"  "  B\0"  "  C\0"  "  D\0"  "  E\0"  "  F\0"  "  G\0"
        "  H\0"  "  I\0"  "  J\0"  "  K\0"  "  L\0"  "  M\0"  "  N\0"  "  O\0"
        "  P\0"  "  Q\0"  "  R\0"  "  S\0"  "  T\0"  "  U\0"  "  V\0"  "  W\0"
        "  X\0"  "  Y\0"  "  Z\0"  "  [\0"  "  \\\0" "  ]\0"  "  ^\0"  "  _\0"
        "  `\0"  "  a\0"  "  b\0"  "  c\0"  "  d\0"  "  e\0"  "  f\0"  "  g\0"
        "  h\0"  "  i\0"  "  j\0"  "  k\0"  "  l\0"  "  m\0"  "  n\0"  "  o\0"
        "  p\0"  "  q\0"  "  r\0"  "  s\0"  "  t\0"  "  u\0"  "  v\0"  "  w\0"
        "  x\0"  "  y\0"  "  z\0"  "  {\0"  "  |\0"  "  }\0"  "  ~\0"  "DEL\0"
        ;							   
		{						
	while ((c=getchar())!= EOF) 
	printf(" %s, %x\n",&asciiname[4*c],c);        
	}

 
}jlantos1@vm71:~/cs240/hw2$ cat hist.c
#include <stdio.h>

/* James Lantos, CS240, HW2, No. 4 									*/

/* Program should read characters from stdin and write to stdout. 	*/
/* For each char input, it prints a histogram of. 					*/
/*  a ) The Decimal value of the character inputted 				*/
/*  b ) The hex value of the character inputted						*/
/* 	c ) the ASCII name of the character inputted 	 				*/
/*  d ) The count of  the character inputted						*/
/* Program stops when encounters an EOF condition on stdin. 		*/

/* Basic code form has been adapted from K/R textbook code 			*/
/* ..and code supplied by professor 								*/

/* ===== PSEUDO CODE / SCHEMATIC =====								*/
/* 1. Stdin file expected											*/
/* 2. Character values c=getchar() named in array ndigit[c]			*/
/* 3. Character counts stored with each character array name 		*/
/* 4. For non zero counts, print character in its various forms ..	*/
/* 5.  ...decimal, hex, ascii and associated count					*/

main()

{

int c,i;
int ndigit[127];  /* includes the range of ASCII characters */	
char asciiname[] =
        "NUL\0"  "SOH\0"  "STX\0"  "ETX\0"  "EOT\0"  "ENQ\0"  "ACK\0"  "BEL\0"
        " BS\0"  " HT\0"  " NL\0"  " VT\0"  " NP\0"  " CR\0"  " SO\0"  " SI\0"
        "DLE\0"  "DC1\0"  "DC2\0"  "DC3\0"  "DC4\0"  "NAK\0"  "SYN\0"  "ETB\0"
        "CAN\0"  " EM\0"  "SUB\0"  "ESC\0"  " FS\0"  " GS\0"  " RS\0"  " VS\0"
        " SP\0"  "  !\0"  "  \"\0" "  #\0"  "  $\0"  "  %\0"  "  &\0"  "  '\0"
        "  (\0"  "  )\0"  "  *\0"  "  +\0"  "  ,\0"  "  -\0"  "  .\0"  "  /\0"
        "  0\0"  "  1\0"  "  2\0"  "  3\0"  "  4\0"  "  5\0"  "  6\0"  "  7\0"
        "  8\0"  "  9\0"  "  :\0"  "  ;\0"  "  <\0"  "  =\0"  "  >\0"  "  ?\0"
        "  @\0"  "  A\0"  "  B\0"  "  C\0"  "  D\0"  "  E\0"  "  F\0"  "  G\0"
        "  H\0"  "  I\0"  "  J\0"  "  K\0"  "  L\0"  "  M\0"  "  N\0"  "  O\0"
        "  P\0"  "  Q\0"  "  R\0"  "  S\0"  "  T\0"  "  U\0"  "  V\0"  "  W\0"
        "  X\0"  "  Y\0"  "  Z\0"  "  [\0"  "  \\\0" "  ]\0"  "  ^\0"  "  _\0"
        "  `\0"  "  a\0"  "  b\0"  "  c\0"  "  d\0"  "  e\0"  "  f\0"  "  g\0"
        "  h\0"  "  i\0"  "  j\0"  "  k\0"  "  l\0"  "  m\0"  "  n\0"  "  o\0"
        "  p\0"  "  q\0"  "  r\0"  "  s\0"  "  t\0"  "  u\0"  "  v\0"  "  w\0"
        "  x\0"  "  y\0"  "  z\0"  "  {\0"  "  |\0"  "  }\0"  "  ~\0"  "DEL\0"
        ;							   
		
	for (i=0; i<=127; ++i) 
	     ndigit[i]=0; 
								
	while ((c=getchar())!= EOF) 
	if (c>=0 && c<=127) /* c is an ASCII digit */
	    ++ndigit[c];
	printf("DEC HEX ASCII COUNT\n"); 
	for (i=0;i<=127;++i) {
	   if (ndigit[i] != 0)
	   printf("%3d %3x %3s #3d\n",i,i,&asciiname[4*i],ndigit[i]);
	}
	printf("\n");
}

 
jlantos1@vm71:~/cs240/hw2$ cat trim.in
		Now is the       
		Time for		
		all good men to    
		come to the aid of the party.      

jlantos1@vm71:~/cs240/hw2$ cat reverser[K[K[Kse.in
Have you heard of palindromes?

In the garden of Eden, on meeting:

"Madam, I'm Adam."

Napoleon on his capability after his first defeat:

"Able was I ere I saw Elba."

And of course, on diet:

"Doc, note: I dissent! A fast never prevents a fatness. I diet on cod."

jlantos1@vm71:~/cs240/hw2$ cat vt.in
}~a,bz\Z
jlantos1@vm71:~/cs240/hw2$ od -x trim.in
0000000 0909 6f4e 2077 7369 7420 6568 2020 2020
0000020 2020 0a20 0909 6954 656d 6620 726f 0909
0000040 090a 6109 6c6c 6720 6f6f 2064 656d 206e
0000060 6f74 2020 2020 090a 6309 6d6f 2065 6f74
0000100 7420 6568 6120 6469 6f20 2066 6874 2065
0000120 6170 7472 2e79 2020 2020 2020 0a0a
0000136
jlantos1@vm71:~/cs240/hw2$ ./trim < trim.in > trim.out
jlantos1@vm71:~/cs240/hw2$ od -x trim.out
0000000 0909 6f4e 2077 7369 7420 6568 090a 5409
0000020 6d69 2065 6f66 0a72 0909 6c61 206c 6f67
0000040 646f 6d20 6e65 7420 0a6f 0909 6f63 656d
0000060 7420 206f 6874 2065 6961 2064 666f 7420
0000100 6568 7020 7261 7974 0a2e
0000112
jlantos1@vm71:~/cs240/hw2$ ./reverse < reverse.in
?semordnilap fo draeh uoy evaH
:gniteem no ,nedE fo nedrag eht nI
".madA m'I ,madaM"
:taefed tsrif sih retfa ytilibapac sih no noelopaN
".ablE was I ere I saw elbA"
:teid no ,esruoc fo dnA
".doc no teid I .ssentaf a stneverp reven tsaf A !tnessid I :eton ,coD"
jlantos1@vm71:~/cs240/hw2$ od -x vt.in
0000000 0201 7e7d 2c61 7a62 7f5c 0a5a
0000014
jlantos1@vm71:~/cs240/hw2$ vt <[K[K[K[K./vt < vt.in > vt.out
jlantos1@vm71:~/cs240/hw2$ od -x vt.out
0000000 5320 484f 202c 0a31 5320 5854 202c 0a32
0000020 2020 7d20 202c 6437 200a 2020 2c7e 3720
0000040 0a65 2020 6120 202c 3136 200a 2020 2c2c
0000060 3220 0a63 2020 6220 202c 3236 200a 2020
0000100 2c7a 3720 0a61 2020 5c20 202c 6335 200a
0000120 4544 2c4c 3720 0a66 2020 5a20 202c 6135
0000140 200a 4e20 2c4c 6120 000a
0000151

jlantos1@vm71:~/cs240/hw2$ ./hist < trim.in
DEC HEX ASCII COUNT
  9   9  HT     10
 10   a  NL      5
 32  20  SP     29
 46  2e   .      1
 78  4e   N      1
 84  54   T      1
 97  61   a      3
 99  63   c      1
100  64   d      2
101  65   e      6
102  66   f      2
103  67   g      1
104  68   h      3
105  69   i      3
108  6c   l      2
109  6d   m      3
110  6e   n      1
111  6f   o      8
112  70   p      1
114  72   r      2
115  73   s      1
116  74   t      6
119  77   w      1
121  79   y      1

jlantos1@vm71:~/cs240/hw2$ ./hist < revese[K[Krse.in
DEC HEX ASCII COUNT
 10   a  NL     14
 32  20  SP     42
 33  21   !      1
 34  22   "      6
 39  27   '      1
 44  2c   ,      4
 46  2e   .      4
 58  3a   :      4
 63  3f   ?      1
 65  41   A      4
 68  44   D      1
 69  45   E      2
 72  48   H      1
 73  49   I      6
 77  4d   M      1
 78  4e   N      1
 97  61   a     18
 98  62   b      3
 99  63   c      4
100  64   d     12
101  65   e     25
102  66   f      8
103  67   g      2
104  68   h      4
105  69   i     10
108  6c   l      5
109  6d   m      5
110  6e   n     16
111  6f   o     15
112  70   p      4
114  72   r      9
115  73   s     13
116  74   t     13
117  75   u      2
118  76   v      3
119  77   w      2
121  79   y      2

jlantos1@vm71:~/cs240/hw2$ ./hist < vt.in
DEC HEX ASCII COUNT
  1   1 SOH      1
  2   2 STX      1
 10   a  NL      1
 44  2c   ,      1
 90  5a   Z      1
 92  5c   \      1
 97  61   a      1
 98  62   b      1
122  7a   z      1
125  7d   }      1
126  7e   ~      1
127  7f DEL      1


jlantos1@vm71:~/cs240/hw2$gcc trim.c -o trim
jlantos1@vm71:~/cs240/hw2$gcc reverse.c -o reverse
jlantos1@vm71:~/cs240/hw2$gcc vt.c -o vt
jlantos1@vm71:~/cs240/hw2$gcc hist.c -o hist
jlantos1@vm71:~/cs240/hw2$ exit
exit

Script done on Tue 19 Feb 2013 03:35:22 PM EST
